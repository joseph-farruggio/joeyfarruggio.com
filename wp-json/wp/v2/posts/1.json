{"id":1,"date":"2018-11-08T16:55:41","date_gmt":"2018-11-08T16:55:41","guid":{"rendered":"http:\/\/joeyfarruggio.com\/?p=1"},"modified":"2019-12-31T19:52:17","modified_gmt":"2019-12-31T19:52:17","slug":"custom-gutenberg-block-advanced-custom-fields","status":"publish","type":"post","link":"https:\/\/joeyfarruggio.com\/wordpress\/custom-gutenberg-block-advanced-custom-fields\/","title":{"rendered":"Create a Hero Block with Gutenberg and Advanced Custom Fields"},"content":{"rendered":"\n<p>In a Tweet I shared my experience in experimenting with <a href=\"https:\/\/advancedcustomfields.com\">Advanced Customer Fields<\/a>&nbsp;and the new Gutenberg editor released with WordPress 5.0. People seemed interested in it enough that I&#8217;ve decided to document my process in this blog post. Hopefully it will help others looking to do the same.<\/p>\n\n\n\n<div style=\"height:42px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<figure class=\"wp-block-embed-twitter aligncenter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\"><a href=\"https:\/\/twitter.com\/wp_acf?ref_src=twsrc%5Etfw\">@wp_acf<\/a> <a href=\"https:\/\/twitter.com\/elliotcondon?ref_src=twsrc%5Etfw\">@elliotcondon<\/a> &#8211; Experimenting with ACF and Gutenberg. Bugs and WordPress 5.0 politics aside, I think of Gutenberg as an improvement on flexible content. The visual representation while editing is a welcomed change compared to collapsible rows. <a href=\"https:\/\/t.co\/oyP7HWd2QD\">pic.twitter.com\/oyP7HWd2QD<\/a><\/p>&mdash; Joseph Farruggio (@Joey_Farruggio) <a href=\"https:\/\/twitter.com\/Joey_Farruggio\/status\/1060215040794603520?ref_src=twsrc%5Etfw\">November 7, 2018<\/a><\/blockquote><script async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"><\/script>\n<\/div><\/figure>\n\n\n\n<div style=\"height:42px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p>Let&#8217;s look at the process of creating a custom hero block.<\/p>\n\n\n\n<h2>Registering your block<\/h2>\n\n\n\n<p>Just as you would register a custom post type, the&nbsp;<code>acf_register_block_type()<\/code>&nbsp;function allows you to register a custom block with Gutenberg.&nbsp;The <a href=\"https:\/\/www.advancedcustomfields.com\/resources\/acf_register_block_type\/\">ACF documentation<\/a> is a detailed guide on how to use the&nbsp;<code>acf_register_block_type()<\/code>&nbsp;function. This guide will get you through the steps, but I recommend looking the docs over.<\/p>\n\n\n\n<pre title=\"functions.php\" class=\"wp-block-code\"><code lang=\"php\" class=\"language-php line-numbers\">\/\/ Register Custom Blocks\nadd_action('acf\/init', 'my_register_blocks');\nfunction my_register_blocks() {\n\n\t\/\/ check function exists.\n\tif( function_exists('acf_register_block_type') ) {\n\n\t\t\t\/\/ register a testimonial block.\n\t\t\tacf_register_block_type(array(\n\t\t\t\t\t'name'\t\t\t\t=> 'hero',\n\t\t\t\t\t'title'\t\t\t\t=> __( 'Hero'),\n\t\t\t\t\t'description'\t\t=> __( 'A custom hero block.'),\n\t\t\t\t\t'render_template'   => 'template-parts\/blocks\/hero.php',\n\t\t\t\t\t'category'\t\t\t=> 'common',\n\t\t\t\t\t'icon'\t\t\t\t=> 'align-center',\n\t\t\t\t\t'keywords'\t\t\t=> array( 'hero', 'banner' ),\n\t\t\t\t\t'enqueue_style' => get_template_directory_uri() . '\/dist\/css\/blocks\/hero.min.css',\n\t\t\t));\n\t}\n}<\/code><\/pre>\n\n\n\n<p><strong>A note on enqueuing block CSS and JS:<\/strong><\/p>\n\n\n\n<p>When you enqueue your CSS and JS within the&nbsp;<code>acf_register_block_type()<\/code>&nbsp;function, your assets are only loaded when your block is present on a page. And those assets get enqueued both on the front-end and the back-end. If you view your block from the editor with preview mode, you may notice areas where you\u2019ll need to write extra CSS scoped specifically for preview mode in the editor. This is because the Gutenberg editor itself enqueues default styling that may affect your block in an unintended way.<\/p>\n\n\n\n<p>The&nbsp;<code>enqueue_style<\/code>&nbsp;above reflects the ACF documentation in that the CSS is being enqueued from the same directory as the block template itself.<\/p>\n\n\n\n<p>This isn\u2019t how I do it in my themes though. I have all of my theme and block SCSS in a&nbsp;<code>\/src<\/code>&nbsp;directory and that SCSS gets compiled to CSS and minified in a&nbsp;<code>\/dist<\/code>&nbsp;directory. SCSS files for blocks live in&nbsp;<code>\/src\/scss\/blocks\/block_name.scss<\/code>. That means I\u2019ll enqueue my block CSS like so:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code class=\"\">'enqueue_style' => get_template_directory_uri() . '\/dist\/css\/blocks\/block_name.min.css'<\/code><\/pre>\n\n\n\n<h2>Creating the hero ACF fields<\/h2>\n\n\n\n<p>Let&#8217;s create our hero fields within ACF.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"594\" src=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-1024x594.png\" alt=\"\" class=\"wp-image-481\" srcset=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-1024x594.png 1024w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-300x174.png 300w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-768x445.png 768w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-1536x890.png 1536w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-2048x1187.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>Note: I like prefixing my block field groups with <code>Block:<\/code> so that they&#8217;re easily distinguished between block controls and custom fields for post types.<br> <br>I organized my fields under two tabs: Content and Style.<\/p>\n\n\n\n<p>Under Content we have the following fields: <\/p>\n\n\n\n<ul><li>heading<\/li><li>heading type (H1, H2, etc)<\/li><li>body<\/li><\/ul>\n\n\n\n<p>Under Style we have: <\/p>\n\n\n\n<ul><li>text color<\/li><li>text alignment<\/li><li>background type<\/li><li>background image<\/li><li>background color<\/li><\/ul>\n\n\n\n<p>Based on the selected <code>Background Type<\/code> there&#8217;s conditional logic to display either the <code>Background Image<\/code> or the <code>Background Color<\/code> fields.<\/p>\n\n\n\n<p>If you&#8217;d like, you can use this ACF fields json export for the exact  fields I used in this example: <a href=\"https:\/\/gist.github.com\/joseph-farruggio\/d2563e51072c669596e5c0a939692ad3\">https:\/\/gist.github.com\/joseph-farruggio\/d2563e51072c669596e5c0a939692ad3<\/a><\/p>\n\n\n\n<h2>Hero template markup<\/h2>\n\n\n\n<p>Next, let&#8217;s build out the hero template markup.&nbsp;<\/p>\n\n\n\n<pre title=\"template-parts\/blocks\/hero.php\" class=\"wp-block-code\"><code lang=\"php\" class=\"language-php line-numbers\">&lt;?php\n\/**\n * Block Name: Hero\n *\n * This is the template that displays a hero banner.\n *\/\n\nif ( get_field('background_type') == \"color\" ) {\n  $background_style = \"background-color: \" . get_field('background_color') . ';';\n} else {\n  $image = get_field('background_image');\n  $background_style = \"background: url(\" . $image['url'] . ') center center no-repeat; background-size: cover;';\n}\n\n$text_color = get_field('text_color');\n$text_align_class = get_field('text_alignment ');\n$id = 'hero-' . $block['id'];\n$align_class = $block['align'] ? 'align' . $block['align'] : '';\n$hero_classes = array($align_class, $text_color, $text_align_class);\n$heading_type = get_field('heading_type');\n\n?>\n\n &lt;div \n  class=\"hero &lt;?php echo implode(\" \", $hero_classes); ?>\" \n  id=\"&lt;?php echo $id; ?>\"\n  style=\"&lt;?php echo $background_style; ?>\">\n    &lt;div class=\"container\">\n      \n      &lt;?php if($heading_type == \"h1\"): ?>\n        &lt;h1 class=\"heading\">&lt;?php the_field('heading'); ?>&lt;\/h1>\n      &lt;?php elseif($heading_type == \"h2\"): ?>\n        &lt;h2 class=\"heading\">&lt;?php the_field('heading'); ?>&lt;\/h2>\n      &lt;?php endif; ?>\n\n      &lt;p>&lt;?php the_field('body'); ?>&lt;\/p>\n    &lt;\/div>\n &lt;\/div><\/code><\/pre>\n\n\n\n<p>At this point, if we were to add the hero to our post, we should see this (excluding CSS, since that&#8217;s up to you):<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"380\" src=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-1-1024x380.png\" alt=\"\" class=\"wp-image-483\" srcset=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-1-1024x380.png 1024w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-1-300x111.png 300w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-1-768x285.png 768w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-1-1536x570.png 1536w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-1-2048x760.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<h2>Styling your hero block<\/h2>\n\n\n\n<p>In your CSS you should create a few utility classes. Or if you&#8217;re using a CSS framework like <a href=\"https:\/\/tailwindcss.com\/\">tailwindcss.com<\/a>, then you should make the values of your block&#8217;s style related fields match the classes you already have. Your text color, background color or background image will be inline styles.<\/p>\n\n\n\n<p>For example:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"css\" class=\"language-css\">.text-left {\n  text-align: left;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-right {\n  text-align: right;\n}\n\n\/\/ Gutenberg specific block alignment\n.alignfull {\n  width: 100vw;\n  position: relative;\n  left: 50%;\n  right: 50%;\n  margin-left: -50vw;\n  margin-right: -50vw;\n}\n\n.alignwide {\n  width: 80vw;\n  position: relative;\n  left: 50%;\n  right: 50%;\n  margin-left: -40vw;\n  margin-right: -40vw;\n}<\/code><\/pre>\n\n\n\n<h2>Using the hero block<\/h2>\n\n\n\n<p>From the Gutenberg editor, I&#8217;ll add in my new hero.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1338\" height=\"1008\" src=\"http:\/\/joeyfarruggio.com\/wp-content\/uploads\/2018\/11\/image-3.png\" alt=\"\" class=\"wp-image-119\" srcset=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2018\/11\/image-3.png 1338w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2018\/11\/image-3-300x226.png 300w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2018\/11\/image-3-768x579.png 768w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2018\/11\/image-3-1024x771.png 1024w\" sizes=\"(max-width: 1338px) 100vw, 1338px\" \/><\/figure>\n\n\n\n<p>From the start, here&#8217;s what we get:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"423\" src=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-2-1024x423.png\" alt=\"\" class=\"wp-image-485\" srcset=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-2-1024x423.png 1024w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-2-300x124.png 300w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-2-768x318.png 768w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-2.png 1446w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>Nothing too exciting, but let&#8217;s add some color:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"431\" src=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-4-1024x431.png\" alt=\"\" class=\"wp-image-488\" srcset=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-4-1024x431.png 1024w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-4-300x126.png 300w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-4-768x324.png 768w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-4-1536x647.png 1536w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-4-2048x863.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>Now let&#8217;s try a background image:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"528\" src=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-6-1024x528.png\" alt=\"\" class=\"wp-image-490\" srcset=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-6-1024x528.png 1024w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-6-300x155.png 300w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-6-768x396.png 768w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-6-1536x793.png 1536w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-6-2048x1057.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<h2>Setting the size of our hero<\/h2>\n\n\n\n<p>Gutenberg comes with some built in sizing capabilities. We have &#8220;wide width&#8221; and &#8220;full width&#8221;. Here&#8217;s what a full width hero looks like:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"337\" src=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-7-1024x337.png\" alt=\"\" class=\"wp-image-491\" srcset=\"https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-7-1024x337.png 1024w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-7-300x99.png 300w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-7-768x253.png 768w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-7-1536x505.png 1536w, https:\/\/joeyfarruggio.com\/wp-content\/uploads\/2019\/12\/image-7-2048x674.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<h2 class=\"js-toc-ignore\">Closing thoughts<\/h2>\n\n\n\n<p>All in all, I&#8217;m really happy with my initial experience with Gutenberg. I think it will be a welcomed change for most users spending time in the editor. I&#8217;m especially excited to see what some of my clients do with the blocks that I provide them in their web projects. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Create a custom Gutenberg hero block with me the easy way with ACF and the new acf_register_block() function.<\/p>\n","protected":false},"author":1,"featured_media":46,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3],"tags":[],"_links":{"self":[{"href":"https:\/\/joeyfarruggio.com\/wp-json\/wp\/v2\/posts\/1"}],"collection":[{"href":"https:\/\/joeyfarruggio.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/joeyfarruggio.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/joeyfarruggio.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/joeyfarruggio.com\/wp-json\/wp\/v2\/comments?post=1"}],"version-history":[{"count":10,"href":"https:\/\/joeyfarruggio.com\/wp-json\/wp\/v2\/posts\/1\/revisions"}],"predecessor-version":[{"id":518,"href":"https:\/\/joeyfarruggio.com\/wp-json\/wp\/v2\/posts\/1\/revisions\/518"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/joeyfarruggio.com\/wp-json\/wp\/v2\/media\/46"}],"wp:attachment":[{"href":"https:\/\/joeyfarruggio.com\/wp-json\/wp\/v2\/media?parent=1"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/joeyfarruggio.com\/wp-json\/wp\/v2\/categories?post=1"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/joeyfarruggio.com\/wp-json\/wp\/v2\/tags?post=1"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}